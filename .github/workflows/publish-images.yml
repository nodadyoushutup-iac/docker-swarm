name: Publish Jenkins images

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version to promote (for example 2.528 or 3283.v92c105e0f819-7)'
        required: true
      image:
        description: 'Target image to publish (jenkins-controller or jenkins-agent)'
        required: false
        default: jenkins-controller

permissions:
  contents: read
  packages: write

jobs:
  promote:
    runs-on: ubuntu-latest
    env:
      DEFAULT_IMAGE: jenkins-controller
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Determine release target
        id: release
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          INPUT_VERSION: ${{ inputs.version }}
          INPUT_IMAGE: ${{ inputs.image }}
          DEFAULT_IMAGE: ${{ env.DEFAULT_IMAGE }}
        run: |
          set -euo pipefail
          image=""
          version=""

          if [[ "${EVENT_NAME}" == "push" ]]; then
            raw_tag="${REF_NAME}"
            if [[ "${raw_tag}" =~ ^(jenkins-controller|jenkins-agent)[-/](.+)$ ]]; then
              image="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
            else
              image="${DEFAULT_IMAGE}"
              version="${raw_tag}"
            fi
          else
            image="${INPUT_IMAGE:-${DEFAULT_IMAGE}}"
            version="${INPUT_VERSION:-}"
          fi

          if [[ -z "${version}" ]]; then
            echo "::error::Version value is required. Provide a tag or set the workflow input." >&2
            exit 1
          fi

          if [[ "${image}" != "jenkins-controller" && "${image}" != "jenkins-agent" ]]; then
            echo "::error::Unsupported image '${image}'. Use jenkins-controller or jenkins-agent." >&2
            exit 1
          fi

          echo "Resolved image: ${image}" 
          echo "Resolved version: ${version}" 

          {
            echo "image=${image}"
            echo "version=${version}"
          } >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote upstream image
        shell: bash
        env:
          IMAGE: ${{ steps.release.outputs.image }}
          VERSION: ${{ steps.release.outputs.version }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          case "${IMAGE}" in
            jenkins-controller)
              source_image="docker.io/jenkins/jenkins:${VERSION}"
              ;;
            jenkins-agent)
              source_image="docker.io/jenkins/inbound-agent:${VERSION}"
              ;;
            *)
              echo "::error::Unknown image '${IMAGE}'" >&2
              exit 1
              ;;
          esac

          target_image="ghcr.io/${OWNER}/${IMAGE}:${VERSION}"

          echo "Promoting ${source_image} -> ${target_image}"

          docker buildx imagetools create \
            --tag "${target_image}" \
            "${source_image}"

      - name: Inspect published manifest
        if: always()
        shell: bash
        env:
          IMAGE: ${{ steps.release.outputs.image }}
          VERSION: ${{ steps.release.outputs.version }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          target="ghcr.io/${OWNER}/${IMAGE}:${VERSION}"
          echo "Inspecting ${target}"
          docker buildx imagetools inspect "${target}"
